---
import { Image } from 'astro:assets';
import Accordion from '@components/Accordion.astro';
import NestedList from '@components/NestedList.astro';
import { getById, findOutput } from '@utils/lookup.js';
import type { Item } from '@utils/lookup.js';
import credit from '../assets/img/credits.png';

// Define the props interface
interface Props {
  item: Item;
}

const { item } = Astro.props;

// Function to create an array of required items
const createArray = (item: Item, num = 1): Array<any> => {
  const array = [];
  const rawItems = [];

  for (const requiredItem of item.RequiredItems || []) {
    const itemData = getById(requiredItem.Id);
    if (!itemData) continue;

    const requiredItems = itemData.RequiredItems?.length
      ? createArray(itemData, requiredItem.Quantity)
      : [];

    if (!requiredItems.length) {
      const existingItem = rawItems.find((r: Item) => r.Name === itemData.Name);
      if (existingItem) {
        existingItem.Quantity += requiredItem.Quantity * num;
      } else {
        rawItems.push({
          Id: itemData.Id,
          Name: itemData.Name,
          Icon: itemData.Icon,
          Colour: itemData.Colour,
          Quantity: requiredItem.Quantity * num,
        });
      }
    }

    array.push({
      Id: itemData.Id,
      Name: itemData.Name,
      Icon: itemData.Icon,
      Colour: itemData.Colour,
      Quantity: requiredItem.Quantity,
      RequiredItems: requiredItems,
    });
  }

  return array;
};

// Function to get output items
const getOutputs = (item) => {
  const RequiredItems = item.Inputs.map((element) => {
    const i: Item | undefined = getById(element.Id);
    if (!i) return;
    return {
      Id: i.Id,
      Icon: i.Icon,
      Name: i.Name,
      Quantity: element.Quantity,
    };
  }).filter(Boolean);

  return {
    Id: Astro.props.item.Id,
    Icon: Astro.props.item.Icon,
    Name: Astro.props.item.Name,
    Quantity: 1,
    RequiredItems: RequiredItems,
  };
};

// Prepare data for rendering
const data = item.RequiredItems?.length
  ? [{
      Id: item.Id,
      Icon: item.Icon,
      Name: item.Name,
      Quantity: 1,
      RequiredItems: createArray(item),
      rawItems: createArray(item).flatMap(i => i.RequiredItems || []),
    }]
  : [];

const output = findOutput(item.Id).map(getOutputs).filter(Boolean);
const showQuantityInput = data.length + output.length > 0;
---

<div class="mx-auto max-w-6xl lg:mt-24 bg-gray-800 p-3 lg:p-8">
  <!-- Item details section -->
  <div class="lg:grid lg:grid-cols-3 lg:items-start lg:gap-x-8">
    <div class="flex flex-col-reverse items-center">
      <Image
        src={`https://app.nmsassistant.com/assets/images/${item.Icon}`}
        alt={item.Name}
        sizes="256px"
        width={256}
        height={256}
      />
    </div>
    <div class="mt-10 col-span-2 px-4 sm:mt-16 sm:px-0 lg:mt-0">
      <h1 class="text-4xl inline-block">{item.Name}</h1>
      <p class="flex items-center gap-2 py-2 pb-4">
        {item.BaseValueUnits}
        <Image
          src={credit}
          alt="Credits"
          sizes="25px"
          width={25}
          height={25}
        />
      </p>
      <p class="lg:text-lg">{item.Description}</p>

      {showQuantityInput && (
        <div class="sm:flex items-center mb-4 gap-4 mt-4">
          <label for="quantity">Quantity</label>
          <input
            class="quantity bg-black border-orange-500 max-w-full w-24"
            name="quantity"
            type="number"
            min="1"
            value="1"
          />
        </div>
      )}
    </div>
  </div>

  <!-- Crafting section -->
  {data.length > 0 && (
    <div id="crafting">
      <h2 class="relative mt-8 mb-4 text-center">
        <span class="bg-gray-800 px-3 lg:text-lg font-medium text-white">
          Crafting
        </span>
      </h2>

      <div class={`grid gap-4 items-start justify-center ${
        data.length === 1 ? 'grid-cols-1' : 'md:grid-cols-2 grid-cols-1'
      }`}>
        {data.map((item) => (
          <div class="bg-gray-900">
            <Accordion open={data.length + output.length === 1}>
              <div class="flex" slot="title">
                <Image
                  src={`https://app.nmsassistant.com/assets/images/${item.Icon}`}
                  alt={item.Name}
                  sizes="50px"
                  width={50}
                  height={50}
                  class="mr-4 flex-shrink-0 self-start"
                />
                <div class="flex items-center">
                  <h4 class="lg:text-lg">
                    {item.Name} x<span data-quantity={item.Quantity}>{item.Quantity}</span>
                  </h4>
                </div>
              </div>
              <div slot="content">
                {item.RequiredItems?.length > 0 && <NestedList items={item} />}

                {item.rawItems.length > 0 && (
                  <div class="mb-4">
                    <h3 class="relative mt-8 mb-4 text-center">
                      <span class="bg-gray-900 px-3 lg:text-lg font-medium text-white">
                        Raw Items
                      </span>
                    </h3>
                    <div class="lg:grid lg:grid-cols-2 lg:items-start">
                      {item.rawItems.map((rawItem) => (
                        <div
                          class="flex p-2"
                          style={`background: #${rawItem.Colour}`}
                        >
                          <Image
                            src={`https://app.nmsassistant.com/assets/images/${rawItem.Icon}`}
                            alt={rawItem.Name}
                            sizes="50px"
                            width={50}
                            height={50}
                            class="mr-4 flex-shrink-0 self-start"
                          />
                          <div class="flex items-center">
                            <h4 class="text-sm">
                              {rawItem.Name} x<span data-quantity={rawItem.Quantity}>{rawItem.Quantity}</span>
                            </h4>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </Accordion>
          </div>
        ))}
      </div>
    </div>
  )}

  <!-- Refining/Cooking section -->
  {output.length > 0 && (
    <div id="refining">
      <h2 class="relative mt-8 mb-4 text-center">
        <span class="bg-gray-800 px-3 lg:text-lg font-medium text-white">
          {item.Id.includes('cook') ? 'Cooking' : 'Refining'}
        </span>
      </h2>
      <div class={`grid gap-4 items-start justify-center ${
        output.length === 3 ? 'xl:grid-cols-3 lg:grid-cols-2 grid-cols-1' : 'md:grid-cols-2 grid-cols-1'
      }`}>
        {output.map((item) => (
          <div class="bg-gray-900">
            <Accordion>
              <div class="flex" slot="title">
                <Image
                  src={`https://app.nmsassistant.com/assets/images/${item.Icon}`}
                  alt={item.Name}
                  sizes="50px"
                  width={50}
                  height={50}
                  class="mr-4 flex-shrink-0 self-start"
                />
                <div class="flex items-center">
                  <h4 class="lg:text-lg">
                    {item.Name} x<span data-quantity={item.Quantity}>{item.Quantity}</span>
                  </h4>
                </div>
              </div>
              <div slot="content">
                {item.RequiredItems?.length > 0 && <NestedList items={item} />}
              </div>
            </Accordion>
          </div>
        ))}
      </div>
    </div>
  )}
</div>

<!-- Quantity input script -->
{showQuantityInput && (
  <script>
    const quantityInput = document.querySelector('input.quantity');
    const elements = document.querySelectorAll('[data-quantity]');

    if (quantityInput) {
      quantityInput.addEventListener('input', () => {
        // Ensure the input value is at least 1
        const value = Math.max(1, parseFloat(quantityInput.value) || 1);
        quantityInput.value = value.toString();

        // Update all quantity elements
        elements.forEach((element) => {
          const baseValue = parseFloat(element.getAttribute('data-quantity') || '0');
          element.textContent = (baseValue * value).toString();
        });
      });
    }
  </script>
)}