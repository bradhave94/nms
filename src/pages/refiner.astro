---
import { Picture } from '@astrojs/image/components';

import 'tabulator-tables/dist/css/tabulator_simple.min.css';

import Layout from '../layouts/Layout.astro';
import refinery from '../data/Refinery.json';

import { getById, getSlug } from '../utils/lookup.js';

function createArray(item) {
	let inputs = [];

	item.Inputs.forEach((element) => {
		let i = getById(element.Id);
		inputs.push({
			name: i.Name,
			description: i.Description,
			amount: element.Quantity,
			image: i.Icon,
			colour: i.Colour,
		});
	});

	let o = getById(item.Output.Id);
	let output = {
		name: o.Name,
		description: o.Description,
		amount: item.Output.Quantity,
		image: o.Icon,
		colour: o.Colour,
	};

	let newItem = {
		input_1: inputs[0],
		input_2: inputs[1],
		input_3: inputs[2],
		output: output,
	};
	return newItem;
}

let columns = [
	{ title: 'Input 1', field: 'input_1' },
	{ title: 'Input 2', field: 'input_2' },
	{ title: 'Input 3', field: 'input_3' },
	{ title: 'Output', field: 'output' },
];

const data = refinery.map(createArray);
---

<style>
	.table-wrapper {
		opacity: 1;
		transition: opacity 0.5s ease-in-out;
	}
	.d-none {
		opacity: 0;

		height: 500px;
		overflow: hidden;
	}
</style>

<Layout>
	<main>
		<label for="fSearch">Search</label>
		<input type="text" id="fSearch" name="fSearch" />
		<div class="table-wrapper d-none">
			<table id="refiner-table">
				<thead>
					<tr>
						{
							columns.map((item) => (
								<>
									<th>{item.title}</th>
								</>
							))
						}
					</tr>
				</thead>
				<tbody>
					{
						data.map((item) => (
							<>
								<tr>
									<td>
										<div style={'background: #' + item.input_1.colour}>
											<span>
												{item.input_1.name} x
												<span class="amount">{item.input_1.amount}</span>
											</span>
											<Picture
												src={
													'https://app.nmsassistant.com/assets/images/' +
													item.input_1.image
												}
												alt={item.input_1.name}
												widths={[50]}
												aspectRatio="1:1"
												sizes="50px"
											/>
										</div>
									</td>
									{item.input_2 != undefined ? (
										<td>
											<span>
												{item.input_2.name} x
												<span class="amount">{item.input_2.amount}</span>
											</span>
											<Picture
												src={
													'https://app.nmsassistant.com/assets/images/' +
													item.input_2.image
												}
												alt={item.input_2.name}
												widths={[50]}
												aspectRatio="1:1"
												sizes="50px"
											/>
										</td>
									) : (
										<td />
									)}
									{item.input_3 != undefined ? (
										<td>
											<span>
												{item.input_3.name} x
												<span class="amount">{item.input_3.amount}</span>
											</span>
											<Picture
												src={
													'https://app.nmsassistant.com/assets/images/' +
													item.input_3.image
												}
												alt={item.input_3.name}
												widths={[50]}
												aspectRatio="1:1"
												sizes="50px"
											/>
										</td>
									) : (
										<td />
									)}
									<td>
										<span>
											{item.output.name} x
											<span class="amount">{item.output.amount}</span>
										</span>
										<Picture
											src={
												'https://app.nmsassistant.com/assets/images/' +
												item.output.image
											}
											alt={item.output.name}
											widths={[50]}
											aspectRatio="1:1"
											sizes="50px"
										/>
									</td>
								</tr>
							</>
						))
					}
				</tbody>
			</table>
		</div>
		<div>
			<button id="print-table">Print Table</button>
		</div>
	</main>
</Layout>

<script>
	import { TabulatorFull as Tabulator } from 'tabulator-tables';

	var table = new Tabulator('#refiner-table', {
		columns: [
			{
				title: 'Input 1',
				field: 'input_1',
				sorterParams: {
					alignEmptyValues: 'bottom',
				},
				formatter: 'html',
			},
			{
				title: 'Input 2',
				field: 'input_2',
				sorterParams: {
					alignEmptyValues: 'bottom',
				},
				formatter: 'html',
			},
			{
				title: 'Input 3',
				field: 'input_3',
				sorterParams: {
					alignEmptyValues: 'bottom',
				},
				formatter: 'html',
			},
			{
				title: 'Output',
				field: 'output',
				sorterParams: {
					alignEmptyValues: 'bottom',
				},
				formatter: 'html',
			},
		],
		initialSort: [{ column: 'output', dir: 'asc' }],
		layout: 'fitColumns',
		rowHeight: 62, //set rows to 40px height
		pagination: true,
		paginationSize: 25,
		paginationSizeSelector: [10, 25, 50, 100, true],
		paginationCounter: 'rows',
		placeholder: 'No results found',
		printAsHtml: true,
	});

	table.on('tableBuilt', function (data) {
		table.element.parentElement.classList.remove('d-none');
	});

	document.getElementById('print-table').addEventListener('click', function () {
		table.print(false, true);
	});

	function matchAny(data, filterParams) {
		var match = false;
		const regex = RegExp(filterParams.value, 'i');

		for (var key in data) {
			if (regex.test(data[key]) == true) {
				match = true;
			}
		}
		return match;
	}

	const input = document.getElementById('fSearch');
	input.addEventListener('keyup', function () {
		table.setFilter(matchAny, { value: input.value });
		if (input.value == ' ') {
			table.clearFilter();
		}
	});
</script>
