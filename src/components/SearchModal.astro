---
const filters = [
	{
		id: 'raw',
		name: 'Raw Materials',
	},

	{
		id: 'products',
		name: 'Products',
	},
	{
		id: 'cooking',
		name: 'Cooking',
	},
	{
		id: 'technology',
		name: 'Technology',
	},
	{
		id: 'buildings',
		name: 'Buildings',
	},
	{
		id: 'curiosities',
		name: 'Curiosities',
	},

	{
		id: 'other',
		name: 'Other',
	},
];
---

<div class="relative z-10 hidden" id="site-search" role="dialog" aria-modal="true">
	<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

	<div id="site-search-modal" class="fixed inset-0 z-10 overflow-y-auto p-4 lg:pl-80 sm:p-6 md:p-20">
		<div class="mx-auto max-w-xl transform divide-y divide-gray-100 overflow-hidden rounded-xl bg-black shadow-2xl ring-1 ring-orange-500 ring-opacity-5 transition-all">
			<div class="relative">
				<svg class="pointer-events-none absolute top-3.5 left-4 h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
					<path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd"></path>
				</svg>

				<input id="search-input" type="text" class="h-12 w-full border-0 bg-transparent pl-11 pr-4 text-white placeholder-gray-400 focus:ring-0 sm:text-sm" placeholder="Search..." role="combobox" aria-expanded="false" aria-controls="options" aria-label="Search items" />
				<p class="text-sm px-4">Select Categories</p>
				<div class="flex flex-wrap gap-2 px-4 pb-4 pt-2">
					{
						filters.map((filter) => {
							return (
								<div class="inline-flex">
									<input type="checkbox" class="peer hidden" name="type-filter" id={filter.id} value={filter.name} tabindex="-1" />
									<label for={filter.id} class="select-none cursor-pointer rounded-lg border-2 border-orange-500 py-0 px-1.5 text-sm text-white transition-colors duration-200 ease-in-out peer-checked:bg-orange-500 peer-checked:text-black">
										{filter.name}
									</label>
								</div>
							);
						})
					}
				</div>
			</div>

			<div id="loading-indicator" class="hidden p-4 text-center text-white">
				Loading...
			</div>

			<div class="max-h-72 scroll-py-2 overflow-y-auto p-8 text-sm text-white" id="results" aria-live="polite"></div>
		</div>
	</div>
</div>

<script>
	const searchInput = document.getElementById('search-input');
	const typeCheckboxes = Array.from(document.querySelectorAll('input[name=type-filter]'));
	const resultsList = document.getElementById('results');
	const loadingIndicator = document.getElementById('loading-indicator');

	let searchCache = new Map();
	let debounceTimer;

	function groupBy(arr, key) {
		return arr.reduce((acc, obj) => {
			const group = obj[key];
			acc[group] = acc[group] || [];
			acc[group].push(obj);
			return acc;
		}, {});
	}

	async function performSearch(searchTerm, selectedTypes) {
		loadingIndicator.classList.remove('hidden');

		if (searchCache.has(searchTerm)) {
			const cachedResults = searchCache.get(searchTerm);
			displayResults(cachedResults, selectedTypes);
			loadingIndicator.classList.add('hidden');
			return;
		}

		try {
			const response = await fetch('/search.json');
			const results = await response.json();
			const filteredResults = results.body.filter((result) => result.name.toLowerCase().includes(searchTerm));
			const groupedResults = groupBy(filteredResults, 'type');

			searchCache.set(searchTerm, groupedResults);
			displayResults(groupedResults, selectedTypes);
		} catch (error) {
			console.error(error);
			resultsList.innerHTML = '<p>Sorry, an error occurred while fetching results.</p>';
		} finally {
			loadingIndicator.classList.add('hidden');
		}
	}

	function handleSearchInput() {
		const searchTerm = searchInput.value.trim().toLowerCase();
		const selectedTypes = typeCheckboxes.filter((checkbox) => checkbox.checked).map((checkbox) => checkbox.value);

		clearTimeout(debounceTimer);
		debounceTimer = setTimeout(() => performSearch(searchTerm, selectedTypes), 300);
	}

	function handleCheckboxChange() {
		handleSearchInput();
	}

	searchInput.addEventListener('input', handleSearchInput);

	typeCheckboxes.forEach((checkbox) => {
		checkbox.addEventListener('change', handleCheckboxChange);
	});

	function displayResults(groupedResults, selectedTypes) {
		const existingHtml = resultsList.innerHTML;
		const newHtml = Object.keys(groupedResults)
			.map((group) => {
				const filteredGroupResults = selectedTypes.length ? groupedResults[group].filter((result) => selectedTypes.includes(result.type)) : groupedResults[group];
				if (filteredGroupResults.length > 0) {
					const groupHtml = `
						<h3 class="text-2xl">${group}</h3>
						<ul role="listbox">
							${filteredGroupResults.map((result, index) => `
								<li role="option" tabindex="0" data-index="${index}">
									<a href="${result.url.replace(/\/+/g, '/')}">${result.name}</a>
								</li>
							`).join('')}
						</ul>
					`;
					return groupHtml;
				} else {
					return '';
				}
			})
			.join('');

		if (newHtml !== existingHtml) {
			resultsList.innerHTML = newHtml;
			setupKeyboardNavigation();
		}
	}

	function setupKeyboardNavigation() {
		const resultItems = resultsList.querySelectorAll('li[role="option"]');
		resultItems.forEach((item, index) => {
			item.addEventListener('keydown', (e) => {
				switch (e.key) {
					case 'ArrowDown':
						e.preventDefault();
						if (index < resultItems.length - 1) {
							resultItems[index + 1].focus();
						}
						break;
					case 'ArrowUp':
						e.preventDefault();
						if (index > 0) {
							resultItems[index - 1].focus();
						} else {
							searchInput.focus();
						}
						break;
					case 'Enter':
						e.preventDefault();
						item.querySelector('a').click();
						break;
				}
			});
		});
	}
</script>