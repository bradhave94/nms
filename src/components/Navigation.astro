---
import ResponsiveToggle from './ResponsiveToggle.astro';
import { Picture } from '@astrojs/image/components';
import logo from '../assets/img/logo-nms.png';

const menuitems = [
	{
		title: 'Home',
		path: '/',
	},
	{
		title: 'Refiner',
		path: '/refiner',
	},
	{
		title: 'Crafting',
		path: '/crafting-guide',
	},
	{
		title: 'Cooking',
		path: '/cooking',
	},
	{
		title: 'Home',
		path: '#',
		children: [
			{ title: 'Action', path: '#' },
			{ title: 'Another action', path: '#' },
			{ title: 'Dropdown Submenu', path: '#' },
		],
	},
];

const slug = Astro.url.pathname
---

<div id="main-navigation" class="active">
	<div class="container stretch">
		<a href="/">
			<Picture
				class="logo"
				src={logo}
				widths={[300]}
				sizes="300px"
				aspectRatio={null}
				background={null}
				alt="descriptive text"
			/>
		</a>
		<div class="wrapper">
			<nav class="desktop-menu" data-slug={slug}>
				<ul>
					{
						menuitems.map((item, index) => (
							<>
								{item.children && (
									<li class="menu-item has-dropdown">
										<button aria-haspopup="true" aria-expanded="false">
											{item.title}
										</button>
										<ul>
											{item.children.map((item, index) => (
												<li>
													<a
														href={item.path}
														class=""
													>
														{item.title}
													</a>
												</li>
											))}
										</ul>
									</li>
								)}
								{!item.children && (
									<li>
										<a
											href={item.path}
											class={slug === item.path ? 'active' : ''}
										>
											{item.title}
										</a>
									</li>
								)}
							</>
						))
					}
				</ul>
			</nav>
			<ResponsiveToggle />
		</div>
	</div>
</div>

<style lang="scss">
	#main-navigation {
		background: var(--background);
		position: sticky;
		top: 0;
		transition: all 0.3s;
		margin-left: -300px;
		min-width: 300px;
		max-width: 300px;

		&.active {
			margin-left: 0;
		}

		.has-dropdown {
			position: relative;

			> button {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				border: none;
				width: 100%;

				&::after {
					content: '';
					width: 0.75rem;
					height: 0.75rem;
					border-style: solid;
					border-width: 0.2em 0.2em 0 0;
					transform: rotate(135deg);
				}

				&.show {
					&::after {
						margin-top: 0.25rem;
						transform: rotate(-45deg);
					}

					~ ul {
						display: flex;
						flex-direction: column;
						gap: 1rem;
					}
				}
			}

			ul {
				display: none;
				position: absolute;
				z-index: 100;
				min-width: 200px;
				top: 125%;
				right: 0;
				bottom: auto;
				left: 0;
				padding-left: 1rem;
				background-color: var(--neutral-background);
				border: 2px solid black;
			}
		}
	}

	@media (max-width: 1200px) {
		#main-navigation {
			margin-left: -350px;
			position: fixed;
			z-index: 9999;
			height: 100vh;
			min-width: 0;
			width: 300px;
			max-width: 75%;
			overflow: scroll;

			&.active {
				margin-left: 0;
				transform: none;
			}
		}
	}
	.logo {
		margin-top: 10px;
		padding: 1rem 2rem 1rem 1rem;
	}

	nav {
		padding-top: 0.75rem;

		a, button {
			padding: 20px;
			font-size: 1.35rem;
			display: block;
			color: #fff;
			-webkit-transition: all 0.2s ease;
			-o-transition: all 0.2s ease;
			transition: all 0.2s ease;
			text-decoration: none;

			&:hover {
				color: var(--primary);
			}
		}
	}
</style>

<script>
	//write a function to toggle the active class on the main navigation on page resize
	function toggleMainNav() {
		const mainNav = document.getElementById('main-navigation');
		const mainNavWidth = mainNav.offsetWidth;
		const windowWidth = window.innerWidth;

		if (windowWidth > 1200) {
			mainNav.classList.add('active');
		} else if (windowWidth <= 1200) {
			mainNav.classList.remove('active');
		}
	}

	//call the function on page load
	toggleMainNav();

	//call the function on page resize
	window.addEventListener('resize', toggleMainNav);

	// variables
	const mainNav = document.querySelector('#main-navigation');
	const mainMenu = mainNav.querySelector('ul');
	const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')];

	// functions
	const setActiveMenuItem = () => {
		const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul');

		mobileDesktopMenus.forEach((menu) => {
			const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')];

			menuItems.forEach((menuItem) => {
				if (menuItem.pathname === window.location.pathname) {
					menuItem.classList.add('is-active');
					menuItem.setAttribute('aria-current', 'page');
				}
			});
		});
	};

	const checkMenuSize = () => {
		const mainNavWidth = mainNav.getBoundingClientRect().width;
		const desktopMenuWidth = document
			.querySelector('.desktop-menu')
			.getBoundingClientRect().width;
		const logoWidthBuffer = 300;
		const totalMenuWidth = parseInt(desktopMenuWidth) + logoWidthBuffer;

		if (totalMenuWidth >= mainNavWidth) {
			mainNav.classList.remove('is-desktop');
			mainNav.classList.add('is-mobile');
		} else if (totalMenuWidth <= mainNavWidth) {
			mainNav.classList.add('is-desktop');
			mainNav.classList.remove('is-mobile');
		}
	};

	const isOutOfViewport = (element) => {
		const elementBounds = element.getBoundingClientRect();
		return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth);
	};

	const openDropdownMenu = (dropdownMenu) => {
		const dropdownList = dropdownMenu.parentNode.querySelector('ul');

		dropdownMenu.classList.add('show');
		dropdownMenu.setAttribute('aria-expanded', 'true');

		if (isOutOfViewport(dropdownList)) {
			dropdownList.style.left = 'auto';
		}
	};

	const closeDropdownMenu = (dropdownMenu) => {
		dropdownMenu.classList.remove('show');
		dropdownMenu.setAttribute('aria-expanded', 'false');
	};

	const closeAllDropdownMenus = () => {
		for (let i = 0; i < dropdownMenus.length; i++) {
			closeDropdownMenu(dropdownMenus[i]);
		}
	};

	const toggleDropdownMenu = (event) => {
		if (event.target.getAttribute('aria-expanded') === 'false') {
			closeAllDropdownMenus();
			openDropdownMenu(event.target);
		} else {
			closeDropdownMenu(event.target);
		}
	};

	// execution
	mainMenu &&
		mainMenu.addEventListener('keydown', (event) => {
			const currentMenuItem = event.target.closest('li');
			const menuItems = [...mainMenu.querySelectorAll('.menu-item')];
			const currentDropdownMenu = event.target.closest('.has-dropdown button');
			const currentDropdownMenuItem = event.target.closest('.has-dropdown li');
			const currentIndex = menuItems.findIndex((item) => item === currentMenuItem);

			const key = event.key;
			let targetItem;

			if (key === 'ArrowRight') {
				if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
					targetItem = menuItems[0];
				} else {
					targetItem = menuItems[currentIndex + 1];
				}
			}

			if (key === 'ArrowLeft') {
				if (menuItems.indexOf(currentMenuItem) === 0) {
					targetItem = menuItems[menuItems.length - 1];
				} else {
					targetItem = menuItems[currentIndex - 1];
				}
			}

			if (key === 'Escape') {
				targetItem = menuItems[0];
			}

			if (currentDropdownMenu) {
				const firstDropdownItem =
					currentDropdownMenu.nextElementSibling.querySelector('li');

				if (key === 'ArrowDown') {
					event.preventDefault();
					openDropdownMenu(currentDropdownMenu);
					targetItem = firstDropdownItem;
				}

				if (key === 'Escape') {
					closeDropdownMenu(currentDropdownMenu);
				}
			}

			if (currentDropdownMenuItem) {
				const currentDropdownList = currentDropdownMenuItem.parentNode;
				const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')];
				const currentIndex = dropdownMenuItems.findIndex(
					(item) => item === currentDropdownMenuItem
				);

				if (key === 'ArrowDown') {
					event.preventDefault();

					if (
						dropdownMenuItems.indexOf(currentDropdownMenuItem) ===
						dropdownMenuItems.length - 1
					) {
						targetItem = dropdownMenuItems[0];
					} else {
						targetItem = dropdownMenuItems[currentIndex + 1];
					}
				}

				if (key === 'ArrowUp') {
					event.preventDefault();

					if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === 0) {
						targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
					} else {
						targetItem = dropdownMenuItems[currentIndex - 1];
					}
				}

				if (key === 'Escape') {
					const currentDropdownMenu = currentDropdownList.previousElementSibling;
					targetItem = currentDropdownMenu.parentNode;
					closeAllDropdownMenus();
				}
			}

			if (targetItem) {
				targetItem.querySelector('a, button, input').focus();
			}
		});

	dropdownMenus &&
		dropdownMenus.forEach((dropdownMenu) => {
			dropdownMenu.addEventListener('click', toggleDropdownMenu);
		});

	setActiveMenuItem();
	checkMenuSize();

	window.addEventListener('resize', checkMenuSize);
	window.addEventListener('click', (event) => {
		if (
			!event.target.hasAttribute('aria-haspopup') &&
			!event.target.classList.contains('submenu-item')
		) {
			closeAllDropdownMenus();
		}
	});
</script>
