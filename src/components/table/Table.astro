---
import '../../assets/css/tabulator.scss';
import TableHead from '@components/table/Head.astro';
import TableCell from '@components/table/Cell.astro';
import { Picture } from '@astrojs/image/components';

export interface Props {
	title: string;
	image: string;
	image_width: number;
	columns: Array<{
		title: string;
		field: string;
	}>;
	sort?: string;
	data: Array<{
		input_1: object;
		input_2: object;
		input_3: object;
		output: object;
		description?: string;
		value?: number;
	}>;
}

const { title, image, image_width, columns, sort, data } = Astro.props;
---

<div class="table-wrapper d-hidden">
	<div class="card-header">
		<div class="d-flex">
			<Picture
				class="logo"
				src={import(`../../assets/img/${image}.png`)}
				widths={[image_width]}
				sizes={image_width + 'px'}
				aspectRatio={null}
				background={null}
				alt="descriptive text"
			/>
			<span>{title}</span>
		</div>

		<div class="d-flex">
			<div class="tabulator-search">
				<input required type="text" id="search" name="search" placeholder="" />
				<label for="search">Search</label>
			</div>
		</div>
	</div>
	<table id="table" data-columns={JSON.stringify(columns)} data-sort={sort || 'output'}>
		<TableHead columns={columns} />
		<tbody>
			{
				data.map((row) => (
					<>
						<tr>
							{columns.map((column) => (
								<TableCell cell={row[column.field]} />
							))}
						</tr>
					</>
				))
			}
		</tbody>
	</table>
</div>


<script>
	import { TabulatorFull as Tabulator } from 'tabulator-tables';
	const sort = document.getElementById('table').dataset.sort;

	const columns = JSON.parse(document.getElementById('table').dataset.columns).map(function (
		element
	) {
		let item = {
			title: element.title,
			field: element.field,
			sorterParams: {
				alignEmptyValues: 'bottom',
			},
			formatter: 'html',
		};
		if (sort === element.field && sort === 'value') {
			item.sorter = 'number';
		}
		return item;
	});

	console.log(columns);

	var table = new Tabulator('#table', {
		columns: columns,

		initialSort: [{ column: sort, dir: sort !== 'value' ? 'asc' : 'desc' }],
		layout: 'fitColumns',
		rowHeight: 62, //set rows to 40px height
		pagination: true,
		paginationSize: 10,
		paginationSizeSelector: [10, 25, 50, 100, true],
		paginationCounter: 'rows',
		placeholder: 'No results found',
		printAsHtml: true,
		columnDefaults: {
			tooltip: function (e, cell, onRendered) {
				const description = cell._cell.element.querySelector('.description')?.innerText;
				var el = document.createElement('div');
				if (!description) {
					return;
				}
				el.innerText = description;
				el.style.backgroundColor = 'black';
				el.style.color = 'white';
				el.style.border = 'none';
				el.style.padding = '10px';
				return el;
			},
		},
	});

	table.on('dataLoaded', function () {
		table.element.parentElement.classList.remove('d-hidden');
	});

	table.on('cellClick', function (e: any) {
		//e - the click event object
		//cell - cell component
		console.log(e);
	});

	function matchAny(data: { [x: string]: string }, filterParams: { value: string | RegExp }) {
		var match = false;
		const regex = RegExp(filterParams.value, 'i');

		for (var key in data) {
			if (regex.test(data[key]) == true) {
				match = true;
			}
		}
		return match;
	}

	const input = document.getElementById('search') as HTMLInputElement;
	input.addEventListener('keyup', function () {
		table.setFilter(matchAny, { value: input.value });
		if (input.value == ' ') {
			table.clearFilter();
		}
	});
</script>
