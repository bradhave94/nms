---
import NestedList from './NestedList.astro';
import { getById, findOutput, Item } from '@utils/lookup.js';

const item: Item = Astro.props.item;

let rawItems = [];

const createArray = (item: Item) => {
	const array = [];
	for (let i = 0; i < item.RequiredItems.length; i++) {
		const item2: Item = item.RequiredItems[i];
		const itemData = getById(item2.Id);
		let RequiredItems: Array<any> = itemData.RequiredItems;

		if (itemData.RequiredItems.length) {
			RequiredItems = createArray(itemData);
		} else {
			let record = rawItems.find((r: Item) => r.Name === itemData.Name);

			if (!record) {
				rawItems.push({
					Name: itemData.Name,
					Icon: itemData.Icon,
					Colour: itemData.Colour,
					Quantity: item2.Quantity,
				});
			} else {
				let index = rawItems.indexOf(record);
				rawItems[index].Quantity += item2.Quantity;
			}
		}
		array.push({
			Name: itemData.Name,
			Icon: itemData.Icon,
			Colour: itemData.Colour,
			Quantity: item2.Quantity,
			RequiredItems: RequiredItems,
		});
	}
	return array;
};

const getOutputs = (item) => {
	// Map the inputs and get the details of each input item using `getById` function

	const RequiredItems = item.Inputs.map((element) => {
		const i: Item | undefined = getById(element.Id);
		// If item is not found, return undefined
		if (!i) return;
		// Return the item details
		return {
			Name: i.Name,
			Quantity: element.Quantity,
		};
	});

	return {
		Name: Astro.props.item.Name,
		Quantity: 1,
		RequiredItems: RequiredItems,
	};
};

const data = [
	{
		Name: Astro.props.item.Name,
		Quantity: 1,
		RequiredItems: createArray(item),
	},
];
const output = findOutput(item.Id).map(getOutputs).filter(Boolean);
---

<h1 style={'background-color: #' + item.Colour}>{item.Name}</h1>
<p>{item.Group}</p>
<p>{item.Description}</p>
<p>{item.BaseValueUnits}</p>

<h1>Crafing</h1>
<input class="quantity" type="number" min="1" value="1" />
<ul>
	{
		data.map(
			(item) =>
				item.RequiredItems.length != 0 && (
					<li>
						{item.Name} x<span data-quantity={item.Quantity}>{item.Quantity}</span>
						{item.RequiredItems && <NestedList items={item.RequiredItems} />}
					</li>
				)
		)
	}
	{
		output.map(
			(item) =>
				item.RequiredItems.length != 0 && (
					<li>
						{item.Name} x<span data-quantity={item.Quantity}>{item.Quantity}</span>
						{item.RequiredItems && <NestedList items={item.RequiredItems} />}
					</li>
				)
		)
	}
</ul>

<style is:global>
	ul ul {
		padding-left: 30px;
	}

	span {
		cursor: pointer;
	}
	input[type='number'] {
		background: #000;
		border: none;
		color: #fff;
		width: 100px;
		padding: 0.25rem 0.5rem;
		font-size: 1.1rem;
		text-align: center;
		height: 40px;
	}
</style>

<script>
	const quantityInputs = document.querySelector('input.quantity');

	const handleClick = (isMinus) => {
		let count = parseInt(quantityInputs.value) + (isMinus ? -1 : 1);
		count = count < 1 ? 1 : count;
		quantityInputs.value = count;
		quantityInputs.dispatchEvent(new Event('change'));
		return false;
	};

	document.querySelectorAll('.minus').forEach(function (el) {
		el.addEventListener('click', handleClick.bind(el, true));
	});
	document.querySelectorAll('.plus').forEach(function (el) {
		el.addEventListener('click', handleClick.bind(el, false));
	});

	const inputField = document.querySelector('.quantity');
	const elements = document.querySelectorAll('[data-quantity]');

	inputField.addEventListener('input', () => {
		const value = parseFloat(inputField.value);
		console.log(elements);

		elements.forEach((element) => {
			const oldValue = parseFloat(element.getAttribute('data-quantity'));
			const newValue = oldValue * value;
			element.innerHTML = newValue.toString();
		});
	});
</script>
