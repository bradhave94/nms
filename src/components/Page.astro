---
import { Picture } from '@astrojs/image/components';
import Disclosure from '@components/Disclosure.jsx';
import Accordion from '@components/Accordion.astro';
import NestedList from './NestedList.astro';

import { getById, findOutput, Item } from '@utils/lookup.js';
import credit from '../assets/img/credits.png';

const item: Item = Astro.props.item;

let rawItems = [];

const createArray = (item: Item) => {
	const array = [];
	for (let i = 0; i < item.RequiredItems.length; i++) {
		const item2: Item = item.RequiredItems[i];
		const itemData = getById(item2.Id);
		let RequiredItems: Array<any> = itemData.RequiredItems;

		if (itemData.RequiredItems.length) {
			RequiredItems = createArray(itemData);
		} else {
			let record = rawItems.find((r: Item) => r.Name === itemData.Name);

			if (!record) {
				rawItems.push({
					Name: itemData.Name,
					Icon: itemData.Icon,
					Colour: itemData.Colour,
					Quantity: item2.Quantity,
				});
			} else {
				let index = rawItems.indexOf(record);
				rawItems[index].Quantity += item2.Quantity;
			}
		}
		array.push({
			Name: itemData.Name,
			Icon: itemData.Icon,
			Colour: itemData.Colour,
			Quantity: item2.Quantity,
			RequiredItems: RequiredItems,
		});
	}
	return array;
};

const getOutputs = (item) => {
	// Map the inputs and get the details of each input item using `getById` function

	const RequiredItems = item.Inputs.map((element) => {
		const i: Item | undefined = getById(element.Id);
		// If item is not found, return undefined
		if (!i) return;
		// Return the item details
		return {
			Id: i.Id,
			Icon: i.Icon,
			Name: i.Name,
			Quantity: element.Quantity,
		};
	});

	return {
		Id: Astro.props.item.Id,
		Icon: Astro.props.item.Icon,
		Name: Astro.props.item.Name,
		Quantity: 1,
		RequiredItems: RequiredItems,
	};
};

const data = [
	{
		Id: Astro.props.item.Id,
		Icon: Astro.props.item.Icon,
		Name: Astro.props.item.Name,
		Quantity: 1,
		RequiredItems: createArray(item),
	},
];
const output = findOutput(item.Id).map(getOutputs).filter(Boolean);
---

<div class="mx-auto max-w-6xl mt-24 bg-gray-800 p-8">
	<div class="lg:grid lg:grid-cols-3 lg:items-start lg:gap-x-8">
		<div class="flex flex-col-reverse items-center">
			<Picture
				src={'https://app.nmsassistant.com/assets/images/' + item.Icon}
				alt={item.Name}
				widths={[256]}
				aspectRatio="1:1"
				sizes="256px"
				width={256}
				height={256}
				background={null}
			/>
		</div>
		<div class="mt-10 col-span-2 px-4 sm:mt-16 sm:px-0 lg:mt-0">
			<h1 class="text-4xl inline-block">{item.Name}</h1>
			<p class="flex items-center gap-2 py-2 pb-4">
				{item.BaseValueUnits}
				<Picture
					src={credit}
					alt="Credits"
					widths={[25]}
					aspectRatio="1:1"
					sizes="25px"
					width={25}
					height={25}
					background={null}
				/>
			</p>
			<p class="text-lg">{item.Description}</p>
		</div>
	</div>
	<div class="relative mt-8">
		<div class="absolute inset-0 flex items-center" aria-hidden="true">
			<div class="w-full border-t border-gray-300"></div>
		</div>
		<div class="relative flex justify-center">
			<span class="bg-white px-3 text-lg font-medium text-gray-900">Crafing</span>
		</div>
	</div>

	<input class="quantity" type="number" min="1" value="1" />

	<div class={data.length + output.length == 1 ? "grid-cols-1" : "grid-cols-2" + " grid gap-4 items-start justify-center"}>
		{
			data.map((item) =>
				item.RequiredItems.length != 0 ? (
					<div class="bg-gray-900">
						<Accordion>
							<div class="flex" slot="title">
								<div class="mr-4 flex-shrink-0 self-start">
									<Picture
										src={
											'https://app.nmsassistant.com/assets/images/' +
											item.Icon
										}
										alt={item.Name}
										widths={[50]}
										aspectRatio="1:1"
										sizes="50px"
										width={50}
										height={50}
										background={null}
									/>
								</div>
								<div class="flex items-center">
									<h4 class="text-lg font-bold">
										{item.Name} x
										<span data-quantity={item.Quantity}>{item.Quantity}</span>
									</h4>
								</div>
							</div>
							<div slot="content">
								{item.RequiredItems.length != 0 ? (
									<NestedList items={item} />
								) : null}
							</div>
						</Accordion>
					</div>
				) : null
			)
		}
		{
			output.map((item) =>
				item.RequiredItems.length != 0 ? (
					<div class="bg-gray-900">
						<Accordion>
							<div class="flex" slot="title">
								<div class="mr-4 flex-shrink-0 self-start">
									<Picture
										src={
											'https://app.nmsassistant.com/assets/images/' +
											item.Icon
										}
										alt={item.Name}
										widths={[50]}
										aspectRatio="1:1"
										sizes="50px"
										width={50}
										height={50}
										background={null}
									/>
								</div>
								<div class="flex items-center">
									<h4 class="text-lg font-bold">
										{item.Name} x
										<span data-quantity={item.Quantity}>{item.Quantity}</span>
									</h4>
								</div>
							</div>
							<div slot="content">
								{item.RequiredItems.length != 0 ? (
									<NestedList items={item} />
								) : null}
							</div>
						</Accordion>
					</div>
				) : null
			)
		}
	</div>
</div>

<script>
	const quantityInputs = document.querySelector('input.quantity');

	const handleClick = (isMinus) => {
		let count = parseInt(quantityInputs.value) + (isMinus ? -1 : 1);
		count = count < 1 ? 1 : count;
		quantityInputs.value = count;
		quantityInputs.dispatchEvent(new Event('change'));
		return false;
	};

	document.querySelectorAll('.minus').forEach(function (el) {
		el.addEventListener('click', handleClick.bind(el, true));
	});
	document.querySelectorAll('.plus').forEach(function (el) {
		el.addEventListener('click', handleClick.bind(el, false));
	});

	const inputField = document.querySelector('.quantity');
	const elements = document.querySelectorAll('[data-quantity]');

	inputField.addEventListener('input', () => {
		const value = parseFloat(inputField.value);
		console.log(elements);

		elements.forEach((element) => {
			const oldValue = parseFloat(element.getAttribute('data-quantity'));
			const newValue = oldValue * value;
			element.innerHTML = newValue.toString();
		});
	});
</script>
